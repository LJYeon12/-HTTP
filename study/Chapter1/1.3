# HTTP/0.9에서 1.0으로의 여정

### **HTTP 서버와 클라이언트 요청/응답 정리**

'''curl.exe -v --http1.0 http://localhost:18888/greeting'''

1. **HTTP 서버 초기화**
   - `httpServer.ListenAndServe()`는 지정된 포트(`:18888`)에서 HTTP 서버를 실행한다.
   - 이 함수는 서버 실행 중 발생한 에러를 반환하며, `log.Println(httpServer.ListenAndServe())`는 해당 에러를 로그로 출력한다.
   - 서버가 정상적으로 실행 중이라면, 반환값이 없으므로 로그는 출력되지 않는다.

2. **클라이언트 요청 처리**
   - 클라이언트가 `curl.exe -v --http1.0 http://localhost:18888/greeting` 명령을 실행하면, **HTTP/1.0 GET 요청**이 `localhost:18888`로 전송된다.
   - 요청 경로는 `/greeting`이며, HTTP 1.0 프로토콜과 기본 헤더 정보(`Host`, `User-Agent`, `Accept`)를 포함한다.

3. **핸들러 함수 동작**
   - 모든 요청은 `http.HandleFunc("/", handler)`에 등록된 핸들러에서 처리된다.
   - `httputil.DumpRequest(r, true)`는 클라이언트 요청 정보를 `[]byte` 형태로 반환한다.
   - 반환된 요청 정보를 `fmt.Println(string(dump))`를 통해 서버 터미널에 출력한다.
   - 이후, `fmt.Fprintf(w, "<html><body>hello</body><html>\n")`로 클라이언트에 HTML 응답을 작성하고 전송한다.

4. **응답 헤더와 본문**
   - 응답 헤더는 본문 작성(`fmt.Fprintf`)이 시작되기 전에 자동으로 생성되고 클라이언트로 전송된다.
   - 생성되는 기본 응답 헤더는 다음과 같다:
     - `HTTP/1.0 200 OK`: 성공 상태 코드.
     - `Content-Type: text/html; charset=utf-8`: 반환된 본문의 MIME 타입.
     - `Content-Length`: 본문의 바이트 길이.
     - `Date`: 응답이 생성된 시점.
   - 이 응답 헤더는 클라이언트가 `-v` 옵션을 사용했기 때문에 터미널에 출력된다.

5. **클라이언트 응답 정보 출력**
   - `curl`은 디버깅 모드(`-v`)에서 요청과 응답을 단계별로 출력한다.
   - 요청 정보:
     ```
     > GET /greeting HTTP/1.0
     > Host: localhost:18888
     > User-Agent: curl/8.9.1
     > Accept: */*
     ```
   - 응답 헤더:
     ```
     < HTTP/1.0 200 OK
     < Date: [현재 시각]
     < Content-Length: 31
     < Content-Type: text/html; charset=utf-8
     ```
   - 응답 본문:
     ```
     <html><body>hello</body><html>
     ```

6. **응답 헤더의 중간 출력 이유**
   - HTTP 응답은 헤더 → 본문 순서로 전송되며, `http.ResponseWriter`가 본문 작성 직전에 자동으로 헤더를 생성하여 전송한다.
   - `curl`은 응답 헤더를 받는 즉시 출력하고, 이후 본문을 출력한다.
   - 따라서 클라이언트 터미널에서는 헤더와 본문이 순차적으로 출력된다.

7. **에러 및 연결 종료 시 동작**
   - 요청 도중 서버에서 에러가 발생하거나, 클라이언트가 연결을 닫으면 전송된 데이터까지만 출력된다.
   - 본문 작성 중 문제가 발생하면 헤더는 이미 전송된 상태로 남아 있을 수 있다.

---

### **정리된 흐름**
1. HTTP 서버는 요청을 수신하고 핸들러에서 이를 처리한다.
2. 요청 데이터는 `DumpRequest`를 통해 서버 터미널에 출력된다.
3. 응답 헤더는 자동으로 생성되며, 본문 작성 전에 전송된다.
4. 클라이언트는 `curl` 디버깅 모드로 요청과 응답 정보를 출력한다.
5. 응답 흐름은 HTTP 프로토콜의 기본 규칙(헤더 → 본문)을 따른다.
----

## 1992년 HTTP
1. 요청 시 **메서드**가 추가되었다.(GET)
2. 요청 시 HTTP 버전이 추가됐다. (HTTP/1.0)
3. **헤더**가 추가됐다. (HOST, User-Agent, Accept)
